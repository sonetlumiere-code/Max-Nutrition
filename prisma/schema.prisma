// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          Role      @default(USER)
  accounts      Account[]
  customer      Customer?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model Customer {
  id        String            @id @default(cuid())
  userId    String            @unique
  birthdate String?
  address   CustomerAddress[]
  orders    Order[]
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@map("customers")
}

model CustomerAddress {
  id         String   @id @default(cuid())
  customerId String
  address    String
  city       String
  postCode   String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // Order      Order[]

  @@map("customer_addresses")
}

enum Measurement {
  UNIT
  GRAM
  MILLILITER

  @@map("measurement")
}

model Ingredient {
  id          String             @id @default(cuid())
  name        String             @unique
  measurement Measurement
  price       Float              @default(0)
  brand       String?
  waste       Float              @default(0)
  carbs       Float              @default(0)
  proteins    Float              @default(0)
  fats        Float              @default(0)
  fiber       Float              @default(0)
  calories    Float              @default(0)
  recipes     RecipeIngredient[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@map("ingredients")
}

model Recipe {
  id                String             @id @default(cuid())
  name              String
  description       String?
  instructions      String?
  timeToCookMinutes Int?               @default(0)
  portions          Int                @default(1)
  ingredients       RecipeIngredient[]
  product           Product?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("recipes")
}

model RecipeIngredient {
  id           String     @id @default(cuid())
  recipeId     String
  ingredientId String
  quantity     Float
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([recipeId, ingredientId])
}

model Product {
  id               String      @id @default(cuid())
  name             String
  description      String
  price            Float
  promotionalPrice Float
  featured         Boolean     @default(false)
  stock            Boolean     @default(true)
  show             Boolean     @default(true)
  image            String
  recipeId         String?     @unique
  recipe           Recipe?     @relation(fields: [recipeId], references: [id])
  categories       Category[]
  orderItems       OrderItem[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@map("products")
}

enum OrderStatus {
  Pending
  Accepted
  Completed
  Cancelled
}

model Order {
  id         String      @id @default(cuid())
  customerId String
  total      Float
  customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  // address           CustomerAddress @relation(fields: [customerAddressId], references: [id])
  items      OrderItem[]
  status     OrderStatus @default(Pending)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  // customerAddressId String

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  withSalt  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

model Promotion {
  id           String                @id @default(cuid())
  name         String
  description  String
  discountType PromotionDiscountType
  discount     Float
  categories   PromotionCategory[]
  isActive     Boolean               @default(true)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  @@map("promotions")
}

enum PromotionDiscountType {
  Fixed
  Percentage
}

model PromotionCategory {
  id          String    @id @default(cuid())
  promotionId String
  categoryId  String
  quantity    Int
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("promotion_categories")
}

model Category {
  id         String              @id @default(cuid())
  name       String              @unique
  products   Product[]
  promotions PromotionCategory[]
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@map("categories")
}

model Settings {
  id               String   @id @default("1")
  operationalHours String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("settings")
}

model ShippingSettings {
  id                             String   @id @default("1")
  takeAway                       Boolean  @default(true)
  shipping                       Boolean  @default(true)
  minProductsQuantityForShipping Int
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  @@map("shipping_settings")
}

model ShippingZone {
  id        String   @id @default(cuid())
  zone      String
  cost      Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("shipping_zones")
}
