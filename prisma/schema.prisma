// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  USER
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          Role      @default(USER)
  accounts      Account[]
  customer      Customer?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model Customer {
  id        String            @id @default(cuid())
  userId    String            @unique
  name      String
  birthdate DateTime?
  phone     Int?              @default(0)
  address   CustomerAddress[]
  orders    Order[]
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@map("customers")
}

enum CustomerAddressLabel {
  HOME
  WORK
  OTHER
}

model CustomerAddress {
  id               String               @id @default(cuid())
  customerId       String
  label            CustomerAddressLabel
  labelString      String?
  province         String
  municipality     String
  locality         String
  addressStreet    String
  addressNumber    Int
  addressFloor     Int?
  addressApartment String?
  postCode         String
  notes            String?
  customer         Customer             @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  order            Order[]

  @@map("customer_addresses")
}

enum Measurement {
  UNIT
  GRAM
  MILLILITER

  @@map("measurement")
}

model Ingredient {
  id          String             @id @default(cuid())
  name        String             @unique
  measurement Measurement
  price       Float              @default(0)
  brand       String?
  waste       Float              @default(0)
  carbs       Float              @default(0)
  proteins    Float              @default(0)
  fats        Float              @default(0)
  fiber       Float              @default(0)
  calories    Float              @default(0)
  recipes     RecipeIngredient[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@map("ingredients")
}

model Recipe {
  id                String             @id @default(cuid())
  name              String
  description       String?
  instructions      String?
  timeToCookMinutes Int?               @default(0)
  portions          Int                @default(1)
  ingredients       RecipeIngredient[]
  product           Product?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("recipes")
}

model RecipeIngredient {
  id           String     @id @default(cuid())
  recipeId     String
  ingredientId String
  quantity     Float
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([recipeId, ingredientId])
}

model Product {
  id               String      @id @default(cuid())
  name             String
  description      String
  price            Float
  promotionalPrice Float
  featured         Boolean     @default(false)
  stock            Boolean     @default(true)
  show             Boolean     @default(true)
  image            String
  recipeId         String?     @unique
  recipe           Recipe?     @relation(fields: [recipeId], references: [id])
  categories       Category[]
  orderItems       OrderItem[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@map("products")
}

enum OrderStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}

model Order {
  id                String             @id @default(cuid())
  customerId        String
  subtotal          Float?
  total             Float
  customer          Customer           @relation(fields: [customerId], references: [id])
  customerAddressId String?
  address           CustomerAddress?   @relation(fields: [customerAddressId], references: [id])
  items             OrderItem[] // Link to order items
  status            OrderStatus        @default(PENDING)
  paymentMethod     PaymentMethod
  shippingMethod    ShippingMethod
  shippingCost      Float
  taxCost           Float?
  notes             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  appliedPromotions AppliedPromotion[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  withSalt  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  MERCADO_PAGO
  CREDIT_CARD
  DEBIT_CARD
}

model AppliedPromotion {
  id                    String     @id @default(cuid())
  orderId               String
  promotion             Promotion? @relation(fields: [promotionId], references: [id])
  promotionId           String?
  promotionName         String
  promotionDiscountType String
  promotionDiscount     Float
  appliedTimes          Int
  order                 Order      @relation(fields: [orderId], references: [id])

  @@map("applied_promotions")
}

model Promotion {
  id                     String                @id @default(cuid())
  name                   String
  description            String
  discountType           PromotionDiscountType
  discount               Float
  categories             PromotionCategory[]
  maxApplicableTimes     Int?
  isActive               Boolean               @default(true)
  allowedPaymentMethods  PaymentMethod[]
  allowedShippingMethods ShippingMethod[]
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  appliedPromotion       AppliedPromotion[]

  @@map("promotions")
}

enum PromotionDiscountType {
  FIXED
  PERCENTAGE
}

model PromotionCategory {
  id          String    @id @default(cuid())
  promotionId String
  categoryId  String
  quantity    Int
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("promotion_categories")
}

model Category {
  id         String              @id @default(cuid())
  name       String              @unique
  products   Product[]
  promotions PromotionCategory[]
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@map("categories")
}

model ShopSettings {
  id                    String            @id @default(cuid())
  allowedPaymentMethods PaymentMethod[]
  branches              ShopBranch[]
  shippingSettings      ShippingSettings?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@map("shop_settings")
}

model ShopBranch {
  id               String             @id @default(cuid())
  label            String
  branchType       BranchType         @default(RETAIL)
  province         String
  municipality     String
  locality         String
  addressStreet    String
  addressNumber    Int
  addressFloor     Int?
  addressApartment String?
  postCode         String?
  phoneNumber      String?
  email            String?
  latitude         Float?
  longitude        Float?
  managerName      String?
  image            String?
  description      String?
  timezone         String?
  isActive         Boolean            @default(true)
  operationalHours OperationalHours[]
  shopSettingsId   String
  shopSettings     ShopSettings       @relation(fields: [shopSettingsId], references: [id], onDelete: Cascade)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@map("shop_branches")
}

enum BranchType {
  RETAIL
}

model OperationalHours {
  id           Int        @id @default(autoincrement())
  dayOfWeek    DayOfWeek
  startTime    String?    @db.VarChar(5) // Stores time in HH:MM format
  endTime      String?    @db.VarChar(5) // Stores time in HH:MM format
  shopBranchId String
  shopBranch   ShopBranch @relation(fields: [shopBranchId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([dayOfWeek, shopBranchId])
  @@map("operational_hours")
}

enum ShippingMethod {
  TAKE_AWAY
  DELIVERY
}

model ShippingSettings {
  id                             String           @id @default(cuid())
  allowedShippingMethods         ShippingMethod[]
  minProductsQuantityForDelivery Int              @default(10)
  shopSettings                   ShopSettings     @relation(fields: [shopSettingsId], references: [id])
  shopSettingsId                 String           @unique
  shippingZones                  ShippingZone[]
  createdAt                      DateTime         @default(now())
  updatedAt                      DateTime         @updatedAt

  @@map("shipping_settings")
}

model ShippingZone {
  id                 String           @id @default(cuid())
  province           String
  municipality       String
  locality           String
  isActive           Boolean          @default(true)
  cost               Float            @default(0)
  shippingSettingsId String
  shippingSettings   ShippingSettings @relation(fields: [shippingSettingsId], references: [id], onDelete: Cascade)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@map("shipping_zones")
}
