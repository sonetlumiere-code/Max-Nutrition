// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  roleId        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  customer Customer?
  role     Role?     @relation(fields: [roleId], references: [id])

  @@map("users")
}

enum RoleGroup {
  STAFF
  CUSTOMER
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  group       RoleGroup
  permissions Permission[]
  users       User[]

  @@map("roles")
}

enum ActionKey {
  view
  create
  update
  delete
  export
}

enum SubjectKey {
  analytics
  products
  categories
  promotions
  orders
  customers
  customerAddresses
  shopSettings
  shopBranches
  shippingSettings
  shippingZones
  ingredients
  recipes
  roles
  permissions
  users
}

model Permission {
  id          String     @id @default(cuid())
  name        String     @unique
  actionKey   ActionKey
  subjectKey  SubjectKey
  description String?

  roles Role[]

  @@unique([actionKey, subjectKey])
  @@map("permissions")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model Customer {
  id        String    @id @default(cuid())
  userId    String?   @unique
  name      String
  birthdate DateTime?
  phone     Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  addresses CustomerAddress[]
  orders    Order[]
  user      User?             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customers")
}

enum CustomerAddressLabel {
  HOME
  WORK
  OTHER
}

model CustomerAddress {
  id               String   @id @default(cuid())
  customerId       String
  labelString      String?
  province         String
  municipality     String
  locality         String
  addressStreet    String
  addressNumber    Int
  addressFloor     Int?
  addressApartment String?
  postCode         String
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  customer Customer             @relation(fields: [customerId], references: [id], onDelete: Cascade)
  label    CustomerAddressLabel
  order    Order[]

  @@unique([customerId, label, labelString])
  @@map("customer_addresses")
}

enum Measurement {
  UNIT
  GRAM
  MILLIGRAM
  MILLILITER
  KILOGRAM
  LITER

  @@map("measurement")
}

model Ingredient {
  id                   String   @id @default(cuid())
  name                 String   @unique
  price                Float    @default(0)
  amountPerMeasurement Float    @default(1)
  brand                String?
  waste                Float    @default(0)
  carbs                Float    @default(0)
  proteins             Float    @default(0)
  fats                 Float    @default(0)
  fiber                Float    @default(0)
  calories             Float    @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  measurement Measurement
  recipeIngredients     RecipeIngredient[]

  @@map("ingredients")
}

model Recipe {
  id                String   @id @default(cuid())
  name              String
  description       String?
  instructions      String?
  timeToCookMinutes Int?     @default(0)
  portions          Int      @default(1)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  recipeIngredients RecipeIngredient[]
  product     Product?

  @@map("recipes")
}

model RecipeIngredient {
  id           String   @id @default(cuid())
  recipeId     String
  ingredientId String
  quantity     Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  ingredient Ingredient @relation(fields: [ingredientId], references: [id])
  recipe     Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, ingredientId])
}

model Product {
  id               String   @id @default(cuid())
  name             String
  description      String
  price            Float
  promotionalPrice Float
  featured         Boolean  @default(false)
  stock            Boolean  @default(true)
  show             Boolean  @default(true)
  image            String
  recipeId         String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  categories Category[]
  orderItems OrderItem[]
  recipe     Recipe?     @relation(fields: [recipeId], references: [id])

  @@map("products")
}

enum OrderStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model Order {
  id                String   @id @default(cuid())
  customerId        String
  subtotal          Float?
  total             Float
  customerAddressId String?
  shippingCost      Float
  taxCost           Float?
  notes             String?
  shopBranchId      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  address           CustomerAddress?   @relation(fields: [customerAddressId], references: [id])
  appliedPromotions AppliedPromotion[]
  customer          Customer           @relation(fields: [customerId], references: [id])
  items             OrderItem[]
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus      @default(PENDING)
  shippingMethod    ShippingMethod
  shopBranch        ShopBranch?        @relation(fields: [shopBranchId], references: [id])
  status            OrderStatus        @default(PENDING)

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  withSalt  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId, withSalt])
  @@map("order_items")
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  MERCADO_PAGO
  CREDIT_CARD
  DEBIT_CARD
}

model AppliedPromotion {
  id                    String @id @default(cuid())
  orderId               String
  promotionId           String
  promotionName         String
  promotionDiscountType String
  promotionDiscount     Float
  appliedTimes          Int

  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  promotion Promotion @relation(fields: [promotionId], references: [id])

  @@unique([orderId, promotionId])
  @@map("applied_promotions")
}

model Promotion {
  id                 String   @id @default(cuid())
  name               String
  description        String
  discount           Float
  maxApplicableTimes Int?
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  appliedPromotion       AppliedPromotion[]
  allowedPaymentMethods  PaymentMethod[]
  allowedShippingMethods ShippingMethod[]
  categories             PromotionCategory[]
  discountType           PromotionDiscountType

  @@map("promotions")
}

enum PromotionDiscountType {
  FIXED
  PERCENTAGE
}

model PromotionCategory {
  id          String   @id @default(cuid())
  promotionId String
  categoryId  String
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category  Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@unique([promotionId, categoryId])
  @@map("promotion_categories")
}

enum CategoryGroup {
  FOOD
  BAKERY
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group      CategoryGroup
  products   Product[]
  promotions PromotionCategory[]

  @@map("categories")
}

model ShopSettings {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  allowedPaymentMethods PaymentMethod[]
  branches              ShopBranch[]
  shippingSettings      ShippingSettings?
  shippingZones         ShippingZone[]

  @@map("shop_settings")
}

model ShopBranch {
  id               String   @id @default(cuid())
  label            String
  province         String
  municipality     String
  locality         String
  addressStreet    String
  addressNumber    Int
  addressFloor     Int?
  addressApartment String?
  postCode         String?
  phoneNumber      String?
  email            String?
  latitude         Float?
  longitude        Float?
  managerName      String?
  image            String?
  description      String?
  timezone         String?
  isActive         Boolean  @default(true)
  shopSettingsId   String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  branchType       BranchType         @default(RETAIL)
  operationalHours OperationalHours[]
  shopSettings     ShopSettings       @relation(fields: [shopSettingsId], references: [id], onDelete: Cascade)
  Order            Order[]

  @@map("shop_branches")
}

enum BranchType {
  RETAIL
}

model OperationalHours {
  id           Int      @id @default(autoincrement())
  startTime    String?  @db.VarChar(5) // Stores time in HH:MM format
  endTime      String?  @db.VarChar(5) // Stores time in HH:MM format
  shopBranchId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  dayOfWeek  DayOfWeek
  shopBranch ShopBranch @relation(fields: [shopBranchId], references: [id], onDelete: Cascade)

  @@unique([dayOfWeek, shopBranchId])
  @@map("operational_hours")
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum ShippingMethod {
  TAKE_AWAY
  DELIVERY
}

model ShippingSettings {
  id                             String   @id @default(cuid())
  minProductsQuantityForDelivery Int      @default(10)
  shopSettingsId                 String   @unique
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  allowedShippingMethods ShippingMethod[]
  shopSettings           ShopSettings     @relation(fields: [shopSettingsId], references: [id])

  @@map("shipping_settings")
}

model ShippingZone {
  id             String   @id @default(cuid())
  province       String
  municipality   String
  locality       String   @unique
  isActive       Boolean  @default(true)
  cost           Float    @default(0)
  shopSettingsId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  shopSettings ShopSettings @relation(fields: [shopSettingsId], references: [id], onDelete: Cascade)

  @@map("shipping_zones")
}
